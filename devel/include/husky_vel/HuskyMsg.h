// Generated by gencpp from file husky_vel/HuskyMsg.msg
// DO NOT EDIT!


#ifndef HUSKY_VEL_MESSAGE_HUSKYMSG_H
#define HUSKY_VEL_MESSAGE_HUSKYMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace husky_vel
{
template <class ContainerAllocator>
struct HuskyMsg_
{
  typedef HuskyMsg_<ContainerAllocator> Type;

  HuskyMsg_()
    : linearVelocity(0.0)
    , angularVelocity(0.0)  {
    }
  HuskyMsg_(const ContainerAllocator& _alloc)
    : linearVelocity(0.0)
    , angularVelocity(0.0)  {
  (void)_alloc;
    }



   typedef float _linearVelocity_type;
  _linearVelocity_type linearVelocity;

   typedef float _angularVelocity_type;
  _angularVelocity_type angularVelocity;





  typedef boost::shared_ptr< ::husky_vel::HuskyMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::husky_vel::HuskyMsg_<ContainerAllocator> const> ConstPtr;

}; // struct HuskyMsg_

typedef ::husky_vel::HuskyMsg_<std::allocator<void> > HuskyMsg;

typedef boost::shared_ptr< ::husky_vel::HuskyMsg > HuskyMsgPtr;
typedef boost::shared_ptr< ::husky_vel::HuskyMsg const> HuskyMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::husky_vel::HuskyMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::husky_vel::HuskyMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::husky_vel::HuskyMsg_<ContainerAllocator1> & lhs, const ::husky_vel::HuskyMsg_<ContainerAllocator2> & rhs)
{
  return lhs.linearVelocity == rhs.linearVelocity &&
    lhs.angularVelocity == rhs.angularVelocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::husky_vel::HuskyMsg_<ContainerAllocator1> & lhs, const ::husky_vel::HuskyMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace husky_vel

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::husky_vel::HuskyMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::husky_vel::HuskyMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::husky_vel::HuskyMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::husky_vel::HuskyMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_vel::HuskyMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::husky_vel::HuskyMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::husky_vel::HuskyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "352405445bc14611a0dc96feba55c2c2";
  }

  static const char* value(const ::husky_vel::HuskyMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x352405445bc14611ULL;
  static const uint64_t static_value2 = 0xa0dc96feba55c2c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::husky_vel::HuskyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "husky_vel/HuskyMsg";
  }

  static const char* value(const ::husky_vel::HuskyMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::husky_vel::HuskyMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 linearVelocity\n"
"float32 angularVelocity\n"
;
  }

  static const char* value(const ::husky_vel::HuskyMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::husky_vel::HuskyMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linearVelocity);
      stream.next(m.angularVelocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HuskyMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::husky_vel::HuskyMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::husky_vel::HuskyMsg_<ContainerAllocator>& v)
  {
    s << indent << "linearVelocity: ";
    Printer<float>::stream(s, indent + "  ", v.linearVelocity);
    s << indent << "angularVelocity: ";
    Printer<float>::stream(s, indent + "  ", v.angularVelocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HUSKY_VEL_MESSAGE_HUSKYMSG_H
