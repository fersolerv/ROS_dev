// Generated by gencpp from file arm_client/battery_simGoal.msg
// DO NOT EDIT!


#ifndef ARM_CLIENT_MESSAGE_BATTERY_SIMGOAL_H
#define ARM_CLIENT_MESSAGE_BATTERY_SIMGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_client
{
template <class ContainerAllocator>
struct battery_simGoal_
{
  typedef battery_simGoal_<ContainerAllocator> Type;

  battery_simGoal_()
    : charge_state(false)  {
    }
  battery_simGoal_(const ContainerAllocator& _alloc)
    : charge_state(false)  {
  (void)_alloc;
    }



   typedef uint8_t _charge_state_type;
  _charge_state_type charge_state;





  typedef boost::shared_ptr< ::arm_client::battery_simGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_client::battery_simGoal_<ContainerAllocator> const> ConstPtr;

}; // struct battery_simGoal_

typedef ::arm_client::battery_simGoal_<std::allocator<void> > battery_simGoal;

typedef boost::shared_ptr< ::arm_client::battery_simGoal > battery_simGoalPtr;
typedef boost::shared_ptr< ::arm_client::battery_simGoal const> battery_simGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_client::battery_simGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_client::battery_simGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_client::battery_simGoal_<ContainerAllocator1> & lhs, const ::arm_client::battery_simGoal_<ContainerAllocator2> & rhs)
{
  return lhs.charge_state == rhs.charge_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_client::battery_simGoal_<ContainerAllocator1> & lhs, const ::arm_client::battery_simGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::arm_client::battery_simGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_client::battery_simGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_client::battery_simGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_client::battery_simGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_client::battery_simGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_client::battery_simGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_client::battery_simGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9fe0035ae38454c245737178227ebba";
  }

  static const char* value(const ::arm_client::battery_simGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9fe0035ae38454cULL;
  static const uint64_t static_value2 = 0x245737178227ebbaULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_client::battery_simGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_client/battery_simGoal";
  }

  static const char* value(const ::arm_client::battery_simGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_client::battery_simGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# This is an action definition file, which has three parts: the goal, the\n"
"# result, and the feedback.\n"
"#\n"
"# Part 1: the goal, to be sent by the client\n"
"#\n"
"# The amount of time we want to wait\n"
"bool charge_state\n"
;
  }

  static const char* value(const ::arm_client::battery_simGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_client::battery_simGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.charge_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct battery_simGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_client::battery_simGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_client::battery_simGoal_<ContainerAllocator>& v)
  {
    s << indent << "charge_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charge_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CLIENT_MESSAGE_BATTERY_SIMGOAL_H
